# Generated by tool/GenerateAst.py
from abc import ABC, abstractmethod
from Expr import Expr
from Token import Token

class Stmt(ABC):
    class Visitor(ABC):
        @abstractmethod
        def visitBlockStmt(self, Stmt: 'Block'):
            pass

        @abstractmethod
        def visitExpressionStmt(self, Stmt: 'Expression'):
            pass

        @abstractmethod
        def visitIfStmt(self, Stmt: 'If'):
            pass

        @abstractmethod
        def visitPrintStmt(self, Stmt: 'Print'):
            pass

        @abstractmethod
        def visitVarStmt(self, Stmt: 'Var'):
            pass

class Block(Stmt):
    statements = None
    def __init__(self, statements):
        self.statements = statements

    def accept(self, visitor):
        return visitor.visitBlockStmt(self)

class Expression(Stmt):
    expression = None
    def __init__(self, expression: Expr):
        self.expression = expression

    def accept(self, visitor):
        return visitor.visitExpressionStmt(self)

class If(Stmt):
    condition = None
    thenBranch = None
    elseBranch = None
    def __init__(self, condition: Expr, thenBranch: Stmt, elseBranch: Stmt):
        self.condition = condition
        self.thenBranch = thenBranch
        self.elseBranch = elseBranch

    def accept(self, visitor):
        return visitor.visitIfStmt(self)

class Print(Stmt):
    expression = None
    def __init__(self, expression: Expr):
        self.expression = expression

    def accept(self, visitor):
        return visitor.visitPrintStmt(self)

class Var(Stmt):
    name = None
    initializer = None
    def __init__(self, name: Token, initializer: Expr):
        self.name = name
        self.initializer = initializer

    def accept(self, visitor):
        return visitor.visitVarStmt(self)

