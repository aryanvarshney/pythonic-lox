# Generated by tool/GenerateAst.py
from abc import ABC, abstractmethod
from Expr import Expr
from Token import Token

class Stmt(ABC):
    class Visitor(ABC):
        @abstractmethod
        def visitExpressionStmt(self, Stmt: 'Expression'):
            pass

        @abstractmethod
        def visitPrintStmt(self, Stmt: 'Print'):
            pass

        @abstractmethod
        def visitVarStmt(self, Stmt: 'Var'):
            pass

class Expression(Stmt):
    expression = None
    def __init__(self, expression: Expr):
        self.expression = expression

    def accept(self, visitor):
        return visitor.visitExpressionStmt(self)

class Print(Stmt):
    expression = None
    def __init__(self, expression: Expr):
        self.expression = expression

    def accept(self, visitor):
        return visitor.visitPrintStmt(self)

class Var(Stmt):
    name = None
    initializer = None
    def __init__(self, name: Token, initializer: Expr):
        self.name = name
        self.initializer = initializer

    def accept(self, visitor):
        return visitor.visitVarStmt(self)

