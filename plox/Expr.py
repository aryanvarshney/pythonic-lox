# Generated by tool/GenerateAst.py
from abc import ABC, abstractmethod
from Token import Token

class Expr(ABC):
    class Visitor(ABC):
        @abstractmethod
        def visitAssignExpr(self, Expr: 'Assign'):
            pass

        @abstractmethod
        def visitBinaryExpr(self, Expr: 'Binary'):
            pass

        @abstractmethod
        def visitCallExpr(self, Expr: 'Call'):
            pass

        @abstractmethod
        def visitGroupingExpr(self, Expr: 'Grouping'):
            pass

        @abstractmethod
        def visitLiteralExpr(self, Expr: 'Literal'):
            pass

        @abstractmethod
        def visitLogicalExpr(self, Expr: 'Logical'):
            pass

        @abstractmethod
        def visitUnaryExpr(self, Expr: 'Unary'):
            pass

        @abstractmethod
        def visitVariableExpr(self, Expr: 'Variable'):
            pass

class Assign(Expr):
    name = None
    value = None
    def __init__(self, name: Token, value: Expr):
        self.name = name
        self.value = value

    def accept(self, visitor):
        return visitor.visitAssignExpr(self)

class Binary(Expr):
    left = None
    operator = None
    right = None
    def __init__(self, left: Expr, operator: Token, right: Expr):
        self.left = left
        self.operator = operator
        self.right = right

    def accept(self, visitor):
        return visitor.visitBinaryExpr(self)

class Call(Expr):
    callee = None
    paren = None
    arguments = None
    def __init__(self, callee: Expr, paren: Token, arguments):
        self.callee = callee
        self.paren = paren
        self.arguments = arguments

    def accept(self, visitor):
        return visitor.visitCallExpr(self)

class Grouping(Expr):
    expression = None
    def __init__(self, expression: Expr):
        self.expression = expression

    def accept(self, visitor):
        return visitor.visitGroupingExpr(self)

class Literal(Expr):
    value = None
    def __init__(self, value):
        self.value = value

    def accept(self, visitor):
        return visitor.visitLiteralExpr(self)

class Logical(Expr):
    left = None
    operator = None
    right = None
    def __init__(self, left: Expr, operator: Token, right: Expr):
        self.left = left
        self.operator = operator
        self.right = right

    def accept(self, visitor):
        return visitor.visitLogicalExpr(self)

class Unary(Expr):
    operator = None
    right = None
    def __init__(self, operator: Token, right: Expr):
        self.operator = operator
        self.right = right

    def accept(self, visitor):
        return visitor.visitUnaryExpr(self)

class Variable(Expr):
    name = None
    def __init__(self, name: Token):
        self.name = name

    def accept(self, visitor):
        return visitor.visitVariableExpr(self)

