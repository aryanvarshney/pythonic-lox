import argparse
from pathlib import Path

class GenerateAst:
    
    @staticmethod
    def main():
        parser = argparse.ArgumentParser(usage="Usage: python GenerateAst.py <output directory>")
        parser.add_argument('f', type=str, help="Provide a valid directory path")
        args = parser.parse_args()
        outputDir = args.f
        GenerateAst.defineAst(outputDir, "Expr", [
            "Binary   -> left: Expr, operator: Token, right: Expr",
            "Grouping -> expression: Expr",
            "Literal  -> value",
            "Unary    -> operator: Token, right: Expr"
        ])
    
    @staticmethod
    def defineAst(outputDir, baseName, types):
        path = Path(outputDir).resolve() / (baseName + '.py')

        with open(path, 'w') as file:
            file.write("# Generated by tool/GenerateAst.py\n")
            file.write("from abc import ABC\n")
            file.write("from Token import Token\n\n")
            file.write("class " + baseName + "(ABC):\n")
            file.write("    placeholder = None\n\n")

            for type in types:
                parts = type.split('->')
                className = parts[0].strip()
                fields = parts[1].strip()
                GenerateAst.defineType(file, baseName, className, fields)
    
    @staticmethod
    def defineType(file, baseName: str, className: str, fieldList: str):
        file.write("class " + className + "(" + baseName + "):\n")

        fields = fieldList.split(', ')
        # Fields initialize
        for field in fields:
            end = field.find(':')
            name = field
            if end != -1:
                name = field[:end]
            file.write("    " + name + " = " + "None\n")

        # Constructor initialize
        file.write("    def __init__(self, " + fieldList + "):\n")
        for field in fields:
            end = field.find(':')
            name = field
            if end != -1:
                name = field[:end]
            file.write("        self." + name + " = " + name + "\n")
        
        file.write("\n")


if __name__ == '__main__':
    GenerateAst.main()