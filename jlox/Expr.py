# Generated by tool/GenerateAst.py
from abc import ABC, abstractmethod
from Token import Token

class Expr(ABC):
    class Visitor(ABC):
        @abstractmethod
        def visitBinaryExpr(Expr: 'Binary'):
            pass

        @abstractmethod
        def visitGroupingExpr(Expr: 'Grouping'):
            pass

        @abstractmethod
        def visitLiteralExpr(Expr: 'Literal'):
            pass

        @abstractmethod
        def visitUnaryExpr(Expr: 'Unary'):
            pass

class Binary(Expr):
    left = None
    operator = None
    right = None
    def __init__(self, left: Expr, operator: Token, right: Expr):
        self.left = left
        self.operator = operator
        self.right = right

    def accept(self, visitor):
        return visitor.visitBinaryExpr(self)

class Grouping(Expr):
    expression = None
    def __init__(self, expression: Expr):
        self.expression = expression

    def accept(self, visitor):
        return visitor.visitGroupingExpr(self)

class Literal(Expr):
    value = None
    def __init__(self, value):
        self.value = value

    def accept(self, visitor):
        return visitor.visitLiteralExpr(self)

class Unary(Expr):
    operator = None
    right = None
    def __init__(self, operator: Token, right: Expr):
        self.operator = operator
        self.right = right

    def accept(self, visitor):
        return visitor.visitUnaryExpr(self)

    @abstractmethod
    def accept(visitor):
        pass

